#!/usr/bin/env bash

# WP Offsite Backup
# This script is a Shell script for backup WordPress to offsite.
# URL: https://github.com/thingsym/wp-offsite-backup
# Version: 0.8.0
# Author: thingsym
# distributed under GPLv3.
# Copyright (c) 2018-2021 thingsym

set -euo pipefail

if [ $(readlink $0) ]; then
  BASEPATH=$(dirname $(readlink $0))
  echo "via symbolic link"
else
  BASEPATH=$(cd $(dirname $0) && pwd)
fi

cd $BASEPATH

LOG_DIR=../log
CNF_DIR=../config

declare -A MESSAGE

usage() {
  echo "WP Offsite Backup Version 0.8.0"
  echo "usage: $(basename ${0}) [<config>|--config|--help]"
  echo "config path: ${BASEPATH}/${CNF_DIR}"
  echo "log path: ${BASEPATH}/${LOG_DIR}"

  cat <<EOF
WP Offsite Backup is a tool for backup WordPress to offsite.

Usage:
    $(basename ${0}) [<options>]

Options:
    <config>      configuration name, default name 'default'
    --config      print config list
    --help        print usage
EOF

  exit 0
}

version_gt() {
  test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1";
}

list_config() {
  echo "list config: ${BASEPATH}/${CNF_DIR}"
  ls -l ${BASEPATH}/${CNF_DIR}
  exit 0
}

case "${1:-}" in
  --help)
    usage
    break
  ;;
  --config)
    list_config
    break
  ;;
esac

logging() {
  if [ -z "$LOG_FILE" ]; then
    echo "Not Found LOG file"
    exit 1
  fi

  if [ ! -f "${LOG_DIR}/${LOG_FILE}" ]; then
    touch ${LOG_DIR}/${LOG_FILE}
  fi

  local formatted_message=""

  if [ "${LOG_FORMAT:-}" = "ltsv" ]; then
    formatted_message+="time:"$(date '+%Y-%m-%d %H:%M:%S')""
    formatted_message+="\tstatus:${MESSAGE[status]}"
    formatted_message+="\tconfig:${MESSAGE[config]}"
    formatted_message+="\tmessage:${MESSAGE[message]}"
  else
    formatted_message+="["$(date '+%Y-%m-%d %H:%M:%S')"]"
    formatted_message+=" [${MESSAGE[status]}]"
    formatted_message+=" [${MESSAGE[config]}]"
    formatted_message+=" ${MESSAGE[message]}"
  fi

  echo -e "${formatted_message}" >> "${LOG_DIR}/${LOG_FILE}"

  local LOG_LINES=$(cat ${LOG_DIR}/${LOG_FILE} | wc -l)
  if [ "$MAX_LOG_LINES" ] && [ 0 -lt "$MAX_LOG_LINES" ] && [ "$LOG_LINES" -gt "$MAX_LOG_LINES" ]; then
    cat ${LOG_DIR}/${LOG_FILE} | tail -n -$MAX_LOG_LINES > ${LOG_DIR}/${LOG_FILE}.new
    mv ${LOG_DIR}/${LOG_FILE}.new ${LOG_DIR}/${LOG_FILE}
  fi
}

load_config() {
  CONFIG=default

  if [ "${1:-}" ]; then
    CONFIG=$1
  elif [ "${WP_OFFSITE_BACKUP_CONFIG:-}" ]; then
    CONFIG=$WP_OFFSITE_BACKUP_CONFIG
  fi

  if [ -f "${BASEPATH}/${CNF_DIR}/${CONFIG}" ]; then
    . ${BASEPATH}/${CNF_DIR}/${CONFIG}
    echo "load CONFIG: ${BASEPATH}/${CNF_DIR}/${CONFIG}"

    echo "JOB_NAME: ${JOB_NAME}"
    echo "CONFIG: ${CONFIG}"
  else
    echo "Not Found CONFIG ${BASEPATH}/${CNF_DIR}/${CONFIG}"
    exit 1
  fi
}

check_config() {
  if [ ! -d "${WP_ROOT_PATH}" ]; then
    echo "Not Found WP_ROOT_PATH $WP_ROOT_PATH"
    MESSAGE=(
      ["status"]="Error"
      ["config"]="${CONFIG}"
      ["message"]="Not Found WP_ROOT_PATH $WP_ROOT_PATH"
    )
    logging
    exit 1
  fi
}

dump_database() {
  if [ -f "${BASEPATH}/${CNF_DIR}/${MYSQL_EXTRA_FILE}" ]; then
    echo "dump database ..."
    mkdir ${TMP_DIR}/database
    mysqldump --defaults-extra-file=${BASEPATH}/${CNF_DIR}/${MYSQL_EXTRA_FILE} --quote-names --skip-lock-tables --single-transaction --no-tablespaces --add-drop-table ${DB_NAME} > ${TMP_DIR}/database/${MYSQL_FILE}
    FILE_SIZE=$(du -sh ${TMP_DIR}/database/${MYSQL_FILE} | sed -e 's/\t//g' | sed -e 's/\/.*//g')
    echo "dump database to ${MYSQL_FILE} (size: ${FILE_SIZE})"
    tar -rf ${TMP_DIR}/${BACKUP_NAME}.tar -C ${TMP_DIR} database/${MYSQL_FILE} || [[ $? == 1 ]]
    rm -r ${TMP_DIR}/database
    echo "archive database to ${TMP_DIR}/${BACKUP_NAME}.tar"
  else
    echo "Not Found MYSQL_EXTRA_FILE ${BASEPATH}/${CNF_DIR}/${MYSQL_EXTRA_FILE}"
  fi
}

archive_file() {
  local EXCLUDE=()

  if [ 0 -lt "${#EXCLUDE_EXTRA[@]}" ]; then
    EXCLUDE+=("${EXCLUDE_EXTRA[@]}")
  fi
  if [ 0 -lt "${#EXCLUDE_WP_CONTENT[@]}" ]; then
    EXCLUDE+=("${EXCLUDE_WP_CONTENT[@]}")
  fi
  if [ 0 -lt "${#EXCLUDE_WP_CORE[@]}" ]; then
    EXCLUDE+=("${EXCLUDE_WP_CORE[@]}")
  fi

  local EXCLUDE_ARG=""
  for ((i = 0; i < ${#EXCLUDE[@]}; i++)); do
    EXCLUDE_ARG+=" --exclude ${EXCLUDE[i]}"
  done

  if [ -d "${WP_ROOT_PATH}" ]; then
    FILE_SIZE=$(du -sh ${WP_ROOT_PATH} | sed -e 's/\t//g' | sed -e 's/\/.*//g')
    echo "archive ${WP_ROOT_PATH} ... (estimated size: ${FILE_SIZE})"
    tar -rf ${TMP_DIR}/${BACKUP_NAME}.tar -C ${WP_ROOT_PATH} . ${EXCLUDE_ARG} || [[ $? == 1 ]]
    FILE_SIZE=$(du -sh ${TMP_DIR}/${BACKUP_NAME}.tar | sed -e 's/\t//g' | sed -e 's/\/.*//g')
    echo "archive WordPress files to ${TMP_DIR}/${BACKUP_NAME}.tar (size: ${FILE_SIZE})"
  else
    echo "Not Found WP_ROOT_PATH ${WP_ROOT_PATH}"
  fi
}

compress_gzip() {
  if type gzip > /dev/null 2>&1; then
    echo "compress file ... (gzip)"
    gzip ${TMP_DIR}/${BACKUP_NAME}.tar
    FILE_SIZE=$(du -sh ${TMP_DIR}/${BACKUP_NAME}.tar.gz | sed -e 's/\t//g' | sed -e 's/\/.*//g')
    echo "compress file to ${BACKUP_NAME}.tar.gz (size: ${FILE_SIZE})"
  else
    echo "Not Found compress command"
    MESSAGE=(
      ["status"]="Error"
      ["config"]="${CONFIG}"
      ["message"]="Not found compress command"
    )
    logging
    exit 1
  fi
}

compress_zstd() {
  if type zstd > /dev/null 2>&1; then
    local ZSTD_VERSION=$(zstd -V | sed 's|.*v\([0-9\.]*\).*|\1|')

    # zstd version 1.3.8 later
    if version_gt $ZSTD_VERSION '1.3.7'; then
      # echo "$ZSTD_VERSION is greater than 1.3.7 !"
      ZSTD_OPTION="--no-progress"
    else
      ZSTD_OPTION=""
    fi

    echo "compress file ... (zstd)"
    zstd -6 --rm ${ZSTD_OPTION} ${TMP_DIR}/${BACKUP_NAME}.tar -o ${TMP_DIR}/${BACKUP_NAME}.tar.zst
    FILE_SIZE=$(du -sh ${TMP_DIR}/${BACKUP_NAME}.tar.zst | sed -e 's/\t//g' | sed -e 's/\/.*//g')
    echo "compress file to ${BACKUP_NAME}.tar.zst (size: ${FILE_SIZE})"
  else
    echo "Not Found compress command"
    MESSAGE=(
      ["status"]="Error"
      ["config"]="${CONFIG}"
      ["message"]="Not found compress command"
    )
    logging
    exit 1
  fi
}

compress_file() {
  if [ ! -f "${TMP_DIR}/${BACKUP_NAME}.tar" ]; then
    echo "Not Found ${BACKUP_NAME}.tar"
    MESSAGE=(
      ["status"]="Error"
      ["config"]="${CONFIG}"
      ["message"]="Not Found ${BACKUP_NAME}.tar"
    )
    logging
    exit 1
  fi

  if [ "${COMPRESS:-}" = "zstd" ]; then
    compress_zstd
  elif [ "${COMPRESS:-}" = "gzip" ]; then
    compress_gzip
  else
    echo "Not Found COMPRESS type"
    MESSAGE=(
      ["status"]="Error"
      ["config"]="${CONFIG}"
      ["message"]="Not found COMPRESS type"
    )
    logging
    exit 1
  fi

}

verify_file_integrity() {
  echo "verifying compressed file integrity ..."
  if [ -f "${TMP_DIR}/${BACKUP_NAME}.tar.zst" ]; then
    if zstd --test ${ZSTD_OPTION} ${TMP_DIR}/${BACKUP_NAME}.tar.zst; then
      echo "success verifying ${BACKUP_NAME}.tar.zst for integrity"
    else
      echo "fail verifying ${BACKUP_NAME}.tar.zst is corrupt"
      MESSAGE=(
        ["status"]="Error"
        ["config"]="${CONFIG}"
        ["message"]="Fail verifying ${BACKUP_NAME}.tar.zst"
      )
      logging
      exit 1
    fi
  elif [ -f "${TMP_DIR}/${BACKUP_NAME}.tar.gz" ]; then
    if gzip --test ${TMP_DIR}/${BACKUP_NAME}.tar.gz; then
      echo "success verifying ${BACKUP_NAME}.tar.gz for integrity"
    else
      echo "fail verifying ${BACKUP_NAME}.tar.gz is corrupt"
      MESSAGE=(
        ["status"]="Error"
        ["config"]="${CONFIG}"
        ["message"]="Fail verifying ${BACKUP_NAME}.tar.gz"
      )
      logging
      exit 1
    fi
  else
    echo "Not Found compressed file ${BACKUP_NAME}.tar.(zst|gz) (${COMPRESS})"
    MESSAGE=(
      ["status"]="Error"
      ["config"]="${CONFIG}"
      ["message"]="Not Found compressed file ${BACKUP_NAME}.tar.(zst|gz) (${COMPRESS})"
    )
    logging
    exit 1
  fi
}

store_s3() {
  if ! type ${USER_LOCAL_BIN_PATH}aws > /dev/null 2>&1; then
    echo "Not Found aws command"
    return;
  fi

  if [ -z "$S3_URI" ]; then
    return;
  fi

  if [ "$AWS_PROFILE" ]; then
    export AWS_DEFAULT_PROFILE=$AWS_PROFILE
    echo "set aws profile: ${AWS_PROFILE}"
  fi

  echo "backup to S3 ..."
  if [ -f "${TMP_DIR}/${BACKUP_NAME}.tar.zst" ]; then
    ${USER_LOCAL_BIN_PATH}aws s3 mv --no-progress --storage-class ${S3_STORAGE_CLASS:-STANDARD_IA} ${TMP_DIR}/${BACKUP_NAME}.tar.zst $S3_URI
    echo "backup ${BACKUP_NAME}.tar.zst to S3"
  elif [ -f "${TMP_DIR}/${BACKUP_NAME}.tar.gz" ]; then
    ${USER_LOCAL_BIN_PATH}aws s3 mv --no-progress --storage-class ${S3_STORAGE_CLASS:-STANDARD_IA} ${TMP_DIR}/${BACKUP_NAME}.tar.gz $S3_URI
    echo "backup ${BACKUP_NAME}.tar.gz to S3"
  else
    echo "Not Found S3 backup file ${BACKUP_NAME}.tar.(zst|gz)"
    MESSAGE=(
      ["status"]="Error"
      ["config"]="${CONFIG}"
      ["message"]="Not Found S3 backup file ${BACKUP_NAME}.tar.(zst|gz)"
    )
    logging
    exit 1
  fi

  local S3_FILES=$(${USER_LOCAL_BIN_PATH}aws s3 ls $S3_URI | wc -l)
  echo "stored files to S3: ${S3_FILES} files"

  if [ "$MAX_SAVED_FILES" ] && [ 0 -lt "$MAX_SAVED_FILES" ] && [ "$S3_FILES" -gt "$MAX_SAVED_FILES" ] ; then

    if [ "$OS" = "FreeBSD" ]; then
      local OFFSET_SAVED_FILES=$(( $MAX_SAVED_FILES+1 ))
      ${USER_LOCAL_BIN_PATH}aws s3 ls $S3_URI | sort -n | tail -r | tail -n +${OFFSET_SAVED_FILES} | awk '{ print $4 }' | xargs -I% ${USER_LOCAL_BIN_PATH}aws s3 rm ${S3_URI}%
    else
      ${USER_LOCAL_BIN_PATH}aws s3 ls $S3_URI | sort -n | head -n -${MAX_SAVED_FILES} | awk '{ print $4 }' | xargs -I% ${USER_LOCAL_BIN_PATH}aws s3 rm ${S3_URI}%
    fi

    echo "delete backup files in order of older update date"
    echo "Stored files to S3: ${MAX_SAVED_FILES} files"
  fi

  ${USER_LOCAL_BIN_PATH}aws s3 ls $S3_URI --recursive --sum | tail -n 1 | awk '{print "Stored size: " $3 / 1024^3 " GB"}'
}

create_tmp_dir() {
  TMP_DIR=$(mktemp -d ${BASEPATH}/../tmp.XXXXXXXXXX)
  echo "create tmp directory to ${TMP_DIR}"
}

delete_tmp_dir() {
  if [ -d "${TMP_DIR:-}" ]; then
    rm -r ${TMP_DIR}
    echo "delete tmp directory ${TMP_DIR}"
  fi
  echo end backup: `date '+%Y-%m-%d %H:%M:%S'`
}
trap delete_tmp_dir EXIT

echo start backup: `date '+%Y-%m-%d %H:%M:%S'`

OS=$(uname -o)

load_config ${1:-}
check_config
create_tmp_dir
if [ -d "${TMP_DIR}" ]; then
  dump_database
  archive_file
  compress_file
  if [ "${SKIP_VERIFY_FILE}" = false ] ; then
    verify_file_integrity
  else
    echo "Skip verifying compressed file integrity"
  fi
  store_s3
else
  echo "Not Found tmp directory"
  exit 1
fi

MESSAGE=(
  ["status"]="Success"
  ["config"]="${CONFIG}"
  ["massage"]="WordPress Backup complete!"
)

logging

exit 0
